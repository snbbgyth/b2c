@model CustomerInfoModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @Html.Partial("MyAccountNavigation", Model.NavigationModel, new ViewDataDictionary())
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}
<div class="row">
    <div class="col-md-12">
        <div class="page account-page customer-info-page ">
            <div class="panel no-br panel-default registration-box">
                <div class="panel-heading no-br">
                    <h4 class="no-margin color-f">@T("Account.MyAccount") - @T("Account.CustomerInfo")</h4>
                </div>             
                <div class="panel-body no-br">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                       
                        <div class="fieldset form-fields">
                            <h4 class="no-margin color-grn font-sr">@T("Account.YourPersonalDetails")</h4>
                            <div class="underline-dased clearfix margin-t5">&nbsp;</div>
                            <div class="form-fields">
                                @if (Model.GenderEnabled)
                                {
                                    <div class="inputs form-group row margin-b10">
                                        <label class="col-sm-3 control-label">@T("Account.Fields.Gender"):</label>
                                        <div class="col-sm-9 rel">
                                            <div class="gender checkbox-inline">
                                                @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })
                                                <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                                            </div>
                                            <div class="gender checkbox-inline">
                                                @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                                                <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="inputs form-group row margin-b10">
                                    @Html.LabelFor(model => model.FirstName, new { @class = "col-sm-3 control-label" }, ":")
                                    <div class="col-sm-9 rel">
                                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control no-br" } })
                                        @Html.RequiredHint()
                                        @Html.ValidationMessageFor(model => model.FirstName)
                                    </div>
                                </div>
                                <div class="inputs form-group row margin-b10">
                                    @Html.LabelFor(model => model.LastName, new { @class = "col-sm-3 control-label" }, ":")
                                    <div class="col-sm-9 rel">
                                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control no-br" } })
                                        @Html.RequiredHint()
                                        @Html.ValidationMessageFor(model => model.LastName)
                                    </div>
                                </div>
                                @if (Model.DateOfBirthEnabled)
{
    <div class="inputs form-group row margin-b10">
        <label class="col-sm-3 control-label">@T("Account.Fields.DateOfBirth"):</label>
        <div class="col-sm-9 rel">
            @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                        Html.FieldNameFor(x => x.DateOfBirthMonth),
                                        Html.FieldNameFor(x => x.DateOfBirthYear),
                                        DateTime.Now.Year - 110,
                                        DateTime.Now.Year,
                                        Model.DateOfBirthDay,
                                        Model.DateOfBirthMonth,
                                        Model.DateOfBirthYear)
            @Html.ValidationMessageFor(model => model.DateOfBirthDay)
            @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
            @Html.ValidationMessageFor(model => model.DateOfBirthYear)
        </div>
    </div>
}
                                <div class="clearfix"></div>
                                <div class="inputs form-group row margin-b10">
                                    @Html.LabelFor(model => model.Email, new { @class = "col-sm-3 control-label" }, ":")
                                    <div class="col-sm-9 rel">
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control no-br" } })
                                        @Html.RequiredHint()
                                        @Html.ValidationMessageFor(model => model.Email)
                                    </div>
                                </div>
                                <div class="clearfix"></div>
                                @if (Model.UsernamesEnabled)
{
    if (Model.AllowUsersToChangeUsernames)
    {
        <div class="inputs form-group row margin-b10">
            @Html.LabelFor(model => model.Username, new { @class = "col-sm-3 control-label" }, ":")
            <div class="col-sm-9 rel">
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control no-br" } })
                @Html.RequiredHint()
                @Html.ValidationMessageFor(model => model.Username)
                @if (Model.CheckUsernameAvailabilityEnabled)
                {
                    @Html.Partial("_CheckUsernameAvailability")
                }
            </div>
        </div>
    }
    else
    {
        <div class="inputs form-group row margin-b10">
            @Html.LabelFor(model => model.Username, new { @class = "col-sm-3 control-label" }, ":")
            <div class="col-sm-9 rel">
                @Model.Username
            </div>
        </div>
    }
}
                            </div>
                        </div>
                        
                        if (Model.CompanyEnabled || Model.DisplayVatNumber)
                        {
                            <div class="fieldset form-fields">
                                <h4 class="no-margin color-grn font-sr">@T("Account.CompanyDetails")</h4>
                                <div class="underline-dased clearfix margin-t5">&nbsp;</div>
                                <div class="form-fields">
                                    @if (Model.CompanyEnabled)
                        {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.Company, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control no-br" } })
                                            @if (Model.CompanyRequired)
                                            {
                                            @Html.RequiredHint()
                                            }
                                            @Html.ValidationMessageFor(model => model.Company)
                                        </div>
                                    </div>
                        }
                                    @if (Model.DisplayVatNumber)
                                {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.VatNumber, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.EditorFor(model => model.VatNumber, new { htmlAttributes = new { @class = "form-control no-br" } })
                                            <span class="vat-status">@Model.VatNumberStatusNote</span>
                                            <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                                        </div>
                                    </div>
                                }
                                </div>
                            </div>
                        }
                        if (Model.StreetAddressEnabled ||
                                    Model.StreetAddress2Enabled ||
                                    Model.ZipPostalCodeEnabled ||
                                    Model.CityEnabled ||
                                    Model.CountryEnabled)
                        {
                            <div class="fieldset form-fields">
                                <h4 class="no-margin color-grn font-sr">@T("Account.YourAddress")</h4>
                                <div class="underline-dased clearfix margin-t5">&nbsp;</div>
                                <div class="form-fields">
                                    @if (Model.StreetAddressEnabled)
                                    {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.StreetAddress, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.EditorFor(model => model.StreetAddress, new { htmlAttributes = new { @class = "form-control no-br" } })
                                            @if (Model.StreetAddressRequired)
                                            {
                                            @Html.RequiredHint()
                                            }
                                            @Html.ValidationMessageFor(model => model.StreetAddress)
                                        </div>
                                    </div>
                                    }
                                    @if (Model.StreetAddress2Enabled)
                                {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.StreetAddress2, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.EditorFor(model => model.StreetAddress2, new { htmlAttributes = new { @class = "form-control no-br" } })
                                            @if (Model.StreetAddress2Required)
                                            {
                                            @Html.RequiredHint()
                                            }
                                            @Html.ValidationMessageFor(model => model.StreetAddress2)
                                        </div>
                                    </div>
                                }
                                    @if (Model.ZipPostalCodeEnabled)
                                {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.ZipPostalCode, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.EditorFor(model => model.ZipPostalCode, new { htmlAttributes = new { @class = "form-control no-br" } })
                                            @if (Model.ZipPostalCodeRequired)
                                            {
                                            @Html.RequiredHint()
                                            }
                                            @Html.ValidationMessageFor(model => model.ZipPostalCode)
                                        </div>
                                    </div>
                                }
                                    @if (Model.CityEnabled)
                                    {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.City, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control no-br" } })
                                            @if (Model.CityRequired)
                                            {
                                            @Html.RequiredHint()
                                            }
                                            @Html.ValidationMessageFor(model => model.City)
                                        </div>
                                    </div>
                                    }
                                    @if (Model.CountryEnabled)
                                    {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.CountryId, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.DropDownList("CountryId", Model.AvailableCountries, new { htmlAttributes = new { @class = "form-control no-br" } })
                                        </div>
                                    </div>
                                    }
                                    @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                                    {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.StateProvinceId, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.DropDownList("StateProvinceId", Model.AvailableStates, new { htmlAttributes = new { @class = "form-control no-br" } })
                                            <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                                        </div>
                                    </div>
                                    }
                                </div>
                            </div>
                        }
                        if (Model.PhoneEnabled || Model.FaxEnabled)
                        {
                            <div class="fieldset form-fields">
                                <h4 class="no-margin color-grn font-sr">@T("Account.YourContactInformation")</h4>
                                <div class="underline-dased clearfix margin-t5">&nbsp;</div>
                                <div class="form-fields">
                                    @if (Model.PhoneEnabled)
                                    {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.Phone, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control no-br" } })
                                            @if (Model.PhoneRequired)
                                            {
                                            @Html.RequiredHint()
                                            }
                                            @Html.ValidationMessageFor(model => model.Phone)
                                        </div>
                                    </div>
                                    }
                                    @if (Model.FaxEnabled)
                                    {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.Fax, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.EditorFor(model => model.Fax, new { htmlAttributes = new { @class = "form-control no-br" } })
                                            @if (Model.FaxRequired)
                                            {
                                            @Html.RequiredHint()
                                            }
                                            @Html.ValidationMessageFor(model => model.Fax)
                                        </div>
                                    </div>
                                    }
                                </div>
                            </div>
                        }
                        if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
                        {
                            <div class="fieldset form-fields">
                                <h4 class="no-margin color-grn font-sr">@T("Account.Options")</h4>
                                <div class="underline-dased clearfix margin-t5">&nbsp;</div>
                                <div class="form-fields">
                                    @if (Model.NewsletterEnabled)
                                    {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.Newsletter, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.EditorFor(model => model.Newsletter)
                                            @Html.ValidationMessageFor(model => model.Newsletter)
                                        </div>
                                    </div>
                                    }
                                    @if (Model.CustomerAttributes.Count > 0)
                                    {
                                        @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
                                    }
                                </div>
                            </div>
                        }
                        if (Model.AllowCustomersToSetTimeZone || Model.SignatureEnabled)
                        {
                            <div class="fieldset form-fields">
                                <h4 class="no-margin color-grn font-sr">@T("Account.Preferences")</h4>
                                <div class="underline-dased clearfix margin-t5">&nbsp;</div>
                                <div class="form-fields">
                                    @if (Model.AllowCustomersToSetTimeZone)
                                    {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.TimeZoneId, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.TimeZoneId)
                                        </div>
                                    </div>
                                    }
                                    @if (Model.SignatureEnabled)
                                    {
                                    <div class="inputs form-group row margin-b10">
                                        @Html.LabelFor(model => model.Signature, new { @class = "col-sm-3 control-label" }, ":")
                                        <div class="col-sm-9 rel">
                                            @Html.TextAreaFor(model => model.Signature, new { @class = "account-signature-text form-control no-br" })
                                        </div>
                                    </div>
                                    }
                                </div>
                            </div>
                        }

                        if (Model.NumberOfExternalAuthenticationProviders > 0)
                        {
                            <div class="fieldset form-fields">
                                <h4 class="no-margin color-grn font-sr">@T("Account.AssociatedExternalAuth")</h4>
                                <div class="underline-dased clearfix margin-t5">&nbsp;</div>
                                @if (Model.AssociatedExternalAuthRecords.Count > 0)
                                {
                                    //existing associated external records
                                    
                                    <table class="data-table">
                                        <colgroup>
                                            <col />
                                            <col />
                                            <col />
                                        </colgroup>
                                        <thead>
                                            <tr>
                                                <th class="a-center auth-method-name">
                                                    @T("Account.AssociatedExternalAuth.AuthMethodName")
                                                </th>
                                                <th class="a-center email">
                                                    @T("Account.AssociatedExternalAuth.Email")
                                                </th>
                                                <th class="a-center external-id">
                                                    @T("Account.AssociatedExternalAuth.ExternalIdentifier")
                                                </th>
                                                <th class="a-center remove">
                                                    @T("Account.AssociatedExternalAuth.Remove")
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model.AssociatedExternalAuthRecords)
                                            {
                                                <tr>
                                                    <td class="a-left auth-method-name">
                                                        @item.AuthMethodName
                                                    </td>
                                                    <td class="a-left email">
                                                        @item.Email
                                                    </td>
                                                    <td class="a-left external-id">
                                                        @CommonHelper.EnsureMaximumLength(item.ExternalIdentifier, 40, "...")
                                                    </td>
                                                    <td class="a-center remove">
                                                        <a href="@Url.Action("RemoveExternalAssociation", "Customer", new { id = item.Id })">@T("Account.AssociatedExternalAuth.Remove")</a>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }

                                @if (Model.NumberOfExternalAuthenticationProviders > Model.AssociatedExternalAuthRecords.Count)
                                {
                                    //we can add more external records
                                    <div class="form-fields add-more-external-records">
                                        @T("Account.AssociatedExternalAuth.AddMoreRecords") <a href="@Url.RouteUrl("Login", null, "http")">@Url.RouteUrl("Login", null, "http")</a>
                                    </div>
                                }
                            </div>
                        }
                        <div class="buttons col-sm-9 margin-t15 col-sm-offset-3">
                            <button type="submit" class="button-1 save-customer-info-button  btn btn-success no-br" name="save-info-button"><i class="fa fa-edit"></i> @T("Common.Save")</button>
                        </div>
                         <div class="message-error margin-t10 clearfix">
                            @Html.ValidationSummary(true)
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>