@model CheckoutBillingAddressModel
@using Nop.Web.Models.Checkout;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
}
<div class="page checkout-page">
    @Html.Action("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Address })
    <div class="page-title">
        <h4 class="no-margin color-grn font-spr">@T("Checkout.BillingAddress")</h4>
        <div class="underline-dased clearfix margin-t5">&nbsp;</div>
    </div>
    <div class="page-body checkout-data">
        @using (Html.BeginRouteForm("CheckoutBillingAddress", FormMethod.Post))
        {
            @Html.Widget("checkout_billing_address_top")
            if (Model.ExistingAddresses.Count > 0)
            {
                <div class="section select-billing-address panel panel-default">
                    <div class="title panel-heading">
                        <strong>@T("Checkout.SelectBillingAddress")</strong>
                    </div>
                    <div class="address-grid panel-body">
                        <div class="row">
                            @foreach (var item in Model.ExistingAddresses)
                            {
                                <div class="address-item col-md-6">
                                    <ul class="address-box no-padd no-list nav-stacked">
                                        <li class="name">
                                            <strong>@item.FirstName @item.LastName</strong>
                                        </li>
                                        <li class="email">@T("Address.Fields.Email"): @item.Email</li>
                                        @if (item.PhoneEnabled)
                                        {
                                            <li class="phone">
                                                @T("Address.Fields.PhoneNumber"):
                                                @item.PhoneNumber
                                            </li>
                                        }
                                        @if (item.FaxEnabled)
                                        {
                                            <li class="fax">
                                                @T("Address.Fields.FaxNumber"):
                                                @item.FaxNumber
                                            </li>
                                        }
                                        @if (item.CompanyEnabled && !String.IsNullOrEmpty(item.Company))
                                        {
                                            <li class="company">
                                                @item.Company
                                            </li>
                                        }
                                        @if (item.StreetAddressEnabled)
                                        {
                                            <li class="address1">
                                                @item.Address1
                                            </li>
                                        }
                                        @if (item.StreetAddress2Enabled && !String.IsNullOrEmpty(item.Address2))
                                        {
                                            <li class="address2">
                                                @item.Address2
                                            </li>
                                        }
                                        @if (item.CityEnabled || item.StateProvinceEnabled || item.ZipPostalCodeEnabled)
                                        {
                                            <li class="city-state-zip">
                                                @if (item.CityEnabled)
                                                {
                                                    @item.City
                                                }
                                                @if (item.CityEnabled && (item.StateProvinceEnabled || item.ZipPostalCodeEnabled))
                                                {
                                                    <text>,</text>
                                                }
                                                @if (item.StateProvinceEnabled)
                                                {
                                                    @item.StateProvinceName
                                                }
                                                @if (item.ZipPostalCodeEnabled)
                                                {
                                                    @item.ZipPostalCode
                                                }
                                            </li>
                                        }
                                        @if (item.CountryEnabled && !String.IsNullOrEmpty(item.CountryName))
                                        {
                                            <li class="country">
                                                @item.CountryName
                                            </li>
                                        }
                                    </ul>
                                    <div class="select-button">
                                        <button type="button" class="button-1 select-billing-address-button btn btn-primary no-br"  onclick="setLocation('@Url.RouteUrl("CheckoutSelectBillingAddress", new {addressId = item.Id})') "><i class="fa fa-check"></i> @T("Checkout.BillToThisAddress")</button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            @Html.Widget("checkout_billing_address_middle")
            <div class="section new-billing-address panel panel-default">
                <div class="title panel-heading">
                    @if (Model.ExistingAddresses.Count > 0)
                    {
                        <strong>@T("Checkout.OrEnterNewAddress")</strong>
                    }
                    else
                    {
                        <strong>@T("Checkout.EnterBillingAddress")</strong>
                    }
                </div>
                <div class="enter-address panel-body">
                    <div class="enter-address-body">
                        @{
                            var dataDictAddress = new ViewDataDictionary();
                            //Merge ModelState (required for validation)
                            dataDictAddress.ModelState.Merge(ViewData.ModelState);
                            dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                            @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)
                        }
                    </div>
                </div>
            </div>
            @Html.Widget("checkout_billing_address_bottom")
            <div class="buttons">
                <button type="submit" name="nextstep" class="button-1 new-address-next-step-button btn btn-success no-br margin-b10"><i class="fa fa-angle-double-right"></i> @T("Checkout.NextButton")</button>
            </div>
        }
        
        <div class="section order-summary-body">
            <div class="title">
                <strong>@T("Checkout.OrderSummary")</strong>
            </div>
            @Html.Action("OrderSummary", "ShoppingCart")
        </div>
    </div>
</div>
